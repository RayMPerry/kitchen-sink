require "io"
require "iterators"
require "sequence"
require "string"
require "os"

local Card = @record {
   card_number: string,
   cardholder_name: string,
   balance: integer,
   ounces_poured: integer
}

function Card.new(card_number: string, cardholder_name: string, balance: integer, ounces_poured: integer)
   local first, last = string.find(card_number, "%d+")
   assert(first == 1 and last == 16, "Card number needs to be 16 digits long.")
   return (@Card){
      =card_number,
      =cardholder_name,
      =balance,
      =ounces_poured
   }
end

local ReaderEventType = @enum { INSERTED = 0, CHARGED, REMOVED }
local reader_event_type_mapping: []string = { "INSERTED", "CHARGED", "REMOVED" }

local ReaderEvent = @record {
   event_type: ReaderEventType,
   timestamp: string,
   payload: string
}

function ReaderEvent.new(event_type: ReaderEventType, payload: string)
   return (@ReaderEvent){
      =event_type,
      timestamp = os.date("%c"),
      =payload
   }
end

function ReaderEvent:__tostring()
   return self.timestamp .. " | " .. reader_event_type_mapping[self.event_type]  .. " | " .. self.payload
end

local CardOrNil = @union { card: Card, none: niltype }

local Reader = @record {
   current_card: CardOrNil,
   events: sequence(ReaderEvent)
}

function Reader:insert_card(card: Card)
   self.events:push(ReaderEvent.new(ReaderEventType.INSERTED, card.cardholder_name))
   self.current_card.card = card
end

function Reader:charge_card(ounces_poured: integer, price_per_ounce: integer)
   if not self.current_card.card then
      return
   end

   local charge_amount = ounces_poured * price_per_ounce
   self.events:push(ReaderEvent.new(ReaderEventType.CHARGED, tostring(charge_amount)))
   self.current_card.card.ounces_poured = self.current_card.card.ounces_poured + ounces_poured
   self.current_card.card.balance = self.current_card.card.balance + charge_amount
end

function Reader:remove_card()
   self.events:push(ReaderEvent.new(ReaderEventType.REMOVED, self.current_card.card.cardholder_name))
   self.current_card.none = nil
end

function Reader:display_stats()
   io.printf("Cardholder: %s\n", self.current_card.card.cardholder_name)
   io.printf("Total Amount: $%.2d\n", self.current_card.card.balance)
   io.printf("Ounces Poured: %.2d\n\n", self.current_card.card.ounces_poured)
   io.print("Events:")

   for _, event in ipairs(self.events) do
      io.print(event)
   end
end

local card = Card.new("5555555555555555", "John Smith", 100, 0)
local reader: Reader

reader:insert_card(card)
reader:charge_card(10, 50)
reader:remove_card()
reader:display_stats()


