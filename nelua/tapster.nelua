require "io"
require "iterators"
require "sequence"
require "string"
require "os"

local Card = @record {
   card_number: string,
   cardholder_name: string,
   balance: number,
   ounces_poured: number
}

function Card:__tostring()
   return string.format("%s, %s, %s, %s", self.cardholder_name, self.card_number, self.balance, self.ounces_poured)
end

local ReaderEventType = @enum { INSERTED = 0, CHARGED, REMOVED }

local ReaderEvent = @record {
   event_type: ReaderEventType,
   timestamp: string,
   payload: string
}

function ReaderEvent.new(event_type: ReaderEventType, payload: string): ReaderEvent
   return {
      =event_type,
      timestamp = os.date("%c"),
      =payload
   }
end

function ReaderEvent:__tostring()
   local reader_event_type_mapping: []string = { "INSERTED", "CHARGED", "REMOVED" }
   return self.timestamp .. " - " .. reader_event_type_mapping[self.event_type]  .. ": " .. self.payload
end

local Reader = @record {
   current_card: *Card,
   events: sequence(ReaderEvent)
}

function Reader:insert_card(card: *Card)
   self.events:push(ReaderEvent.new(ReaderEventType.INSERTED, card.cardholder_name))
   self.current_card = card
end

function Reader:charge_card(ounces_poured: number, price_per_ounce: number)
   check(self.current_card ~= nilptr, "Reader:charge_card called without card!")

   local charge_amount = ounces_poured * price_per_ounce
   self.events:push(ReaderEvent.new(ReaderEventType.CHARGED, string.format("%.2f", charge_amount)))
   self.current_card.ounces_poured = self.current_card.ounces_poured + ounces_poured
   self.current_card.balance = self.current_card.balance + charge_amount
end

function Reader:remove_card()
   check(self.current_card ~= nilptr, "Reader:remove_card called without card!")

   self.events:push(ReaderEvent.new(ReaderEventType.REMOVED, self.current_card.cardholder_name))
   self.current_card = nilptr
end

function Reader:display_stats()
   if self.current_card ~= nilptr then
      io.printf("Cardholder: %s\n", self.current_card.cardholder_name)
      io.printf("Total Amount: $%.2f\n", self.current_card.balance)
      io.printf("Ounces Poured: %.2f\n\n", self.current_card.ounces_poured)
   end

   io.print("Events:")

   for _, event in ipairs(self.events) do
      io.print(event)
   end
end

local card = Card { "5555555555555555", "John Smith" }
local reader: Reader

reader:insert_card(card)
reader:charge_card(10.31, 0.79)
reader:remove_card()
reader:insert_card(card)
reader:display_stats()
